{"cells":[{"source":"![email inbox](email_inbox.jpg)\n\nEvery day, professionals wade through hundreds of emails, from urgent client requests to promotional offers. It's like trying to find important messages in a digital ocean. But AI can help you stay afloat by automatically sorting emails to highlight what matters most.\n\nYou've been asked to build an intelligent email assistant using Llama, to help users automatically classify their incoming emails. Your system will identify which emails need immediate attention, which are regular updates, and which are promotions that can wait or be archived.\n\n### The Data\nYou'll work with a dataset of various email examples, ranging from urgent business communications to promotional offers. Here's a peek at what you'll be working with:\n\n### email_categories_data.csv\n\n Column | Description |\n|--------|-------------|\n| email_id | A unique identifier for each email in the dataset. |\n| email_content | The full email text including subject line and body. Each email follows a format of \"Subject\" followed by the message content on a new line. |\n| expected_category | The correct classification of the email: `Priority`, `Updates`, or `Promotions`. This will be used to validate your model's performance. |\n\n","metadata":{},"id":"4a1291c4-61f8-49ef-899f-89c178cdfd58","cell_type":"markdown"},{"source":"# Run the following cells first\n# Install necessary packages, then import the model running the cell below\n!pip install llama-cpp-python==0.2.82 -q -q -q","metadata":{"executionCancelledAt":null,"executionTime":2989,"lastExecutedAt":1759489068857,"lastExecutedByKernel":"40488565-9a0a-424b-b4d0-031364e87477","lastScheduledRunId":null,"lastSuccessfullyExecutedCode":"# Run the following cells first\n# Install necessary packages, then import the model running the cell below\n!pip install llama-cpp-python==0.2.82 -q -q -q","outputsMetadata":{"0":{"height":353,"type":"stream"}}},"id":"c398267d-bd03-485d-80af-db6d6d2529e4","cell_type":"code","execution_count":3,"outputs":[]},{"source":"SELECT *\nFROM 'models.csv'\nLIMIT 5","metadata":{"customType":"sql","dataFrameVariableName":"df","sqlCellMode":"dataFrame","sqlSource":{"integrationId":"c9696c24-44f3-45f7-8ccd-4b9b046e7e53","integrationType":"files","type":"integration"},"integrationExample":{"example":"-- Explore the data in the table\nSELECT *\nFROM 'models.csv'\nLIMIT 5","sqlSource":{"integrationId":"c9696c24-44f3-45f7-8ccd-4b9b046e7e53","integrationType":"files","type":"integration"}},"executionCancelledAt":null,"executionTime":63,"lastExecutedAt":1759489068922,"lastExecutedByKernel":"40488565-9a0a-424b-b4d0-031364e87477","lastScheduledRunId":null,"lastSuccessfullyExecutedCode":"SELECT *\nFROM 'models.csv'\nLIMIT 5","outputsMetadata":{"0":{"height":500,"type":"dataFrame","tableState":{}}},"collapsed":true,"jupyter":{"outputs_hidden":true,"source_hidden":false}},"id":"bbe8a101-615a-4bd9-af1e-e4f6e69008a0","cell_type":"code","execution_count":2,"outputs":[{"output_type":"error","ename":"Error","evalue":"IO Error: No files found that match the pattern \"models.csv\"","traceback":[]}]},{"source":"# Import required libraries\nimport pandas as pd\nfrom llama_cpp import Llama","metadata":{"executionCancelledAt":1759489068916,"executionTime":53,"lastExecutedAt":1746017015083,"lastExecutedByKernel":"6e37321e-3691-43dd-af5a-b301e7987547","lastScheduledRunId":null,"lastSuccessfullyExecutedCode":"# Import required libraries\nimport pandas as pd\nfrom llama_cpp import Llama"},"id":"6932fc36-bb8e-4ae3-86fd-e3a677a26b4e","cell_type":"code","execution_count":3,"outputs":[]},{"source":"# Load the email dataset\nemails_df = pd.read_csv('data/email_categories_data.csv')\n# Display the first few rows of our dataset\nprint(\"Preview of our email dataset:\")\nemails_df.head(2)","metadata":{"executionCancelledAt":1759489068917,"executionTime":49,"lastExecutedAt":1746017015133,"lastExecutedByKernel":"6e37321e-3691-43dd-af5a-b301e7987547","lastScheduledRunId":null,"lastSuccessfullyExecutedCode":"# Load the email dataset\nemails_df = pd.read_csv('data/email_categories_data.csv')\n# Display the first few rows of our dataset\nprint(\"Preview of our email dataset:\")\nemails_df.head(2)","collapsed":false,"jupyter":{"outputs_hidden":false,"source_hidden":false},"outputsMetadata":{"0":{"height":38,"type":"stream"},"1":{"height":550,"type":"dataFrame","tableState":{"customFilter":{"const":{"type":"boolean","valid":true,"value":true},"id":"4ca4c6d9-90d3-41b7-aaf6-574e78938ebf","nodeType":"const"},"quickFilterText":""}}}},"id":"a5fea094-0942-4abb-aa0b-c78bb3d2543c","cell_type":"code","execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":"Preview of our email dataset:\n"},{"output_type":"execute_result","data":{"application/com.datacamp.data-table.v2+json":{"table":{"schema":{"fields":[{"name":"index","type":"integer"},{"name":"email_id","type":"integer"},{"name":"email_content","type":"string"},{"name":"expected_category","type":"string"}],"primaryKey":["index"],"pandas_version":"1.4.0"},"data":{"index":[0,1],"email_id":[1,2],"email_content":["Urgent: Server Maintenance Required\\nOur main server needs immediate maintenance due to critical errors. Please address ASAP.","50% Off Spring Collection!\\nDon't miss our biggest sale of the season! All spring items half off. Limited time offer."],"expected_category":["Priority","Promotions"]}},"total_rows":2,"truncation_type":null},"text/plain":"   email_id  ... expected_category\n0         1  ...          Priority\n1         2  ...        Promotions\n\n[2 rows x 3 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>email_id</th>\n      <th>email_content</th>\n      <th>expected_category</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>Urgent: Server Maintenance Required\\nOur main ...</td>\n      <td>Priority</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>50% Off Spring Collection!\\nDon't miss our big...</td>\n      <td>Promotions</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{"application/com.datacamp.data-table.v2+json":{"status":"success"}},"execution_count":4}]},{"source":"# Set the model path\nmodel_path = \"/files-integrations/files/c9696c24-44f3-45f7-8ccd-4b9b046e7e53/tinyllama-1.1b-chat-v0.3.Q4_K_M.gguf\"","metadata":{"executionCancelledAt":1759489068919,"executionTime":48,"lastExecutedAt":1746017015181,"lastExecutedByKernel":"6e37321e-3691-43dd-af5a-b301e7987547","lastScheduledRunId":null,"lastSuccessfullyExecutedCode":"# Set the model path\nmodel_path = \"/files-integrations/files/c9696c24-44f3-45f7-8ccd-4b9b046e7e53/tinyllama-1.1b-chat-v0.3.Q4_K_M.gguf\""},"id":"19f4f7a8-088b-44c4-a62f-44af9e9c9152","cell_type":"code","execution_count":5,"outputs":[]},{"source":"# Start coding here\n# Use as many cells as you need","metadata":{"executionCancelledAt":1759489068920,"executionTime":47,"lastExecutedAt":1746017015229,"lastExecutedByKernel":"6e37321e-3691-43dd-af5a-b301e7987547","lastScheduledRunId":null,"lastSuccessfullyExecutedCode":"# Start coding here\n# Use as many cells as you need","collapsed":false,"jupyter":{"outputs_hidden":false,"source_hidden":false}},"id":"7ade0f6f-e0db-415d-b906-e9820370b34e","cell_type":"code","execution_count":6,"outputs":[]},{"source":"# Initialize the Llama model\nllm = Llama(model_path=model_path)\n\n# Create the system prompt with examples\nprompt = \"\"\" You are an email classifier. \nYour task is to assign each email to exactly one of the following categories:\n- Priority: Important or urgent emails that require immediate attention.\n- Updates: Informational emails such as notifications, cancellations, or reminders.\n- Promotions: Marketing or sales-related emails such as discounts, special offers, or deals.\n\nClassify each email by reading its subject and body. \nRespond with ONLY the category name (Priority, Updates, or Promotions). Do not include extra text or other categories, even if they reflect more closely the email topic.\n\nExamples:\n\nExample 1:\nUrgent: Password Reset Required\nYour account security requires immediate attention. Please reset your password within 24 hours.\nPriority\n\nExample 2:\nSpecial Offer - 50% Off Everything!\nDon't miss our biggest sale of the year. Everything must go!\nPromotions\n\nExample 3:\nCanceled Event - Team Meeting\nThis event has been canceled and removed from your calendar.\nUpdates\n\nExample 4:\n\"\"\"\n\n# Function to process messages and return classifications\ndef process_message(llm, message, prompt):\n    \"\"\"Process a message and return the response\"\"\"\n    input_prompt = f\"{prompt} {message}\"\n    response = llm(\n        input_prompt,\n        max_tokens=5,\n        temperature=0\n    )\n    \n    return response['choices'][0]['text'].strip()\n    \n# Let's test our classifier on two emails from our dataset\n# We'll take emails from different categories for variety\ntest_emails = emails_df.head(2)\n\n# Process each test email and store results\nresults = []\nfor idx, row in test_emails.iterrows():\n    email_content = row['email_content']\n    expected_category = row['expected_category']\n    \n    # Get model's classification\n    result = process_message(llm, email_content, prompt)\n    \n    # Store results\n    results.append({\n        'email_content': email_content,\n        'expected_category': expected_category,\n        'model_output': result\n    })\n\n# Create a DataFrame with results\nresults_df = pd.DataFrame(results)\n\nresult1 = results_df['model_output'].iloc[0]\nresult2 = results_df['model_output'].iloc[1]\n\nprint(f\"Result 1: `{result1}`\\nResult 2: `{result2}`\")","metadata":{"executionCancelledAt":1759489068921},"cell_type":"code","id":"81f48089-a182-4c32-b737-98e82e203a44","outputs":[],"execution_count":null}],"metadata":{"colab":{"name":"Welcome to DataCamp Workspaces.ipynb","provenance":[]},"kernelspec":{"display_name":"Python 3 (ipykernel)","language":"python","name":"python3"},"language_info":{"name":"python","version":"3.8.10","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"editor":"DataLab"},"nbformat":4,"nbformat_minor":5}
